(defun Ceaser_Encrypt(thing move)
  (format t "This is Encrypted: ")
  (setf thing (map 'string (lambda (i)
  (code-char (+ 65 (mod (+ (- (char-code i) 65) move) 26)))) thing))
  (format t thing)
  (terpri)
  (return-from Ceaser_Encrypt thing)
)

(defun Ceaser_Decrypt(thing move)
  (format t "This is Decrypted: ")
  (setf thing (map 'string (lambda (i)
  (code-char (+ 65 (mod (- (- (char-code i) 65) move) 26)))) thing))
  (format t thing)
)

(defun Ceaser_Solve(thing)
   (format t "This is all of them: ")
   (defvar solve_move 1)
   
   (setf thing (map 'string (lambda (i)
   (code-char (+ 65 (mod (- (- (char-code i) 65) solve_move) 26)))) thing))
   (write thing)
   (setq solve_move (1+ solve_move))
   (when (solve_move < 26) Ceaser_Solve thing)
   (terpri)
)

(defvar word "SORINZ")
(defvar move 5)
(setq word (Ceaser_Encrypt word move))
(Ceaser_Solve "SORINZ")
(Ceaser_Decrypt word move)
